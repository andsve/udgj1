local ACTIONS = require("main.shared.actions")

local function handle_kb(self, id_suffix, action_id, action)
	local inputs = {}
	inputs["key-up"] = ACTIONS.UP
	inputs["key-down"] = ACTIONS.DOWN
	inputs["key-left"] = ACTIONS.LEFT
	inputs["key-right"] = ACTIONS.RIGHT
	inputs["key-action"] = ACTIONS.ACTION
	
	for k, v in pairs(inputs) do
		if action_id == hash(k .. id_suffix) then
			return v
		end
	end

	return nil
end

local function handle_gp(self, id_gamepad, action_id, action)
	local inputs = {}
	inputs["gp-up"] = ACTIONS.UP
	inputs["gp-down"] = ACTIONS.DOWN
	inputs["gp-left"] = ACTIONS.LEFT
	inputs["gp-right"] = ACTIONS.RIGHT
	inputs["gp-action"] = ACTIONS.ACTION

	if action.gamepad == id_gamepad then

		for k, v in pairs(inputs) do
			if action_id == hash(k) then
				if action.value > 0.5 then
					return v
				end
			end
		end
	end
end

local all_input_cbs = {function(self, action_id, action)
	return handle_kb(self, "-p1", action_id, action)
end,
function(self, action_id, action)
	return handle_kb(self, "-p2", action_id, action)
end,
function(self, action_id, action)
	return handle_kb(self, "-p3", action_id, action)
end,
function(self, action_id, action)
	return handle_kb(self, "-p4", action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 0, action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 1, action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 2, action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 3, action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 4, action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 5, action_id, action)
end,
function(self, action_id, action)
	return handle_gp(self, 6, action_id, action)
end}

local function start_game(self, players)
	self.players = players
	msg.post("#gameproxy", "async_load")
	--self.state = hash("game")
end

local function start_lobby(self)
	msg.post("#lobbyproxy", "load")
	self.state = hash("lobby")

	self.players = {}
	self.player_count = 0
	
	-- create list of available inputs
	self.lobby_available_inputs = {}
	for k,v in pairs(all_input_cbs) do
		self.lobby_available_inputs[k] = v
	end
end

local function close_lobby(self)
	msg.post("#lobbyproxy", "unload")
	self.state = hash("menu")
end

local function show_menu(self)
	msg.post("#menuproxy", "async_load")
	--sound.play("audio#menu_bg")
end

local function show_win(self, winner)
	self.state = hash("win")
	msg.post("menu:/menu", "change_screen", { screen = "win"})
	msg.post("menu:/menu", "set_winner", { winner_text = winner.player_id_text, winner_color = winner.color})
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.spawn_positions = {
		{-11, 9},
		{-1, 9},
		{9, 9},
		{-11, -2},
		{-1, -2},
		{9, -2}
	}
	self.player_colors = {
		vmath.vector4(71/255, 93/255, 229/255, 1.0),
		vmath.vector4(179/255, 32/255, 21/255, 1.0),
		vmath.vector4(24/255, 131/255, 58/255, 1.0),
		vmath.vector4(198/255, 188/255, 30/255, 1.0),
		vmath.vector4(142/255, 22/255, 102/255, 1.0)
	}
	
	local players = {
		p1 = {
			input_cb = function(self, action_id, action)
				return handle_kb(self, "-p1", action_id, action)
			end,
			color = vmath.vector4(142/255, 22/255, 102/255, 1.0)
		},
		p2 = {
			input_cb = function(self, action_id, action)
				return handle_kb(self, "-p2", action_id, action)
			end,
			color = vmath.vector4(71/255, 93/255, 229/255, 1.0)
		}
	}
	self.players = {}
	--start_game(self, players)

	self.state = hash("menu")
	show_menu(self)

	-- start bg fx
	particlefx.play("#bg_effect")
end

function update(self, dt)
	if self.state == hash("menu") then
		msg.post("logo", "enable")
	else
		msg.post("logo", "disable")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
		
		if sender == msg.url("controller:/main#gameproxy") then
			-- send player info
			print("sending player info")
			for player_id, player in pairs(self.players) do
				msg.post("game:/game", "new_player", {id = player_id, player_color = player.color, start_pos = player.start_pos})
			end
			msg.post("game:/game", "game_map")
			self.state = hash("game")
		elseif sender == msg.url("controller:/main#lobbyproxy") then
			msg.post("game:/game", "lobby_map")
		end
	elseif message_id == hash("start_lobby") then
		start_lobby(self)
	elseif message_id == hash("cancel_lobby") then
		close_lobby(self)
	elseif message_id == hash("start_game") then
		-- make sure we can only start if all players are ready
		local all_ready = true
		local player_count = 0
		for k,v in pairs(self.players) do
			player_count = player_count + 1
			all_ready = all_ready and v.ready
		end
		if not all_ready then
			local not_ready_go = factory.create("#textfactory", vmath.vector3(0,64,0))
			local label_url = msg.url(not_ready_go)
			label_url.fragment = "label"
			label.set_text(label_url, "Everyone needs to be ready!")
			return
		end
		if player_count < 2 then
			local not_ready_go = factory.create("#textfactory", vmath.vector3(0,64,0))
			local label_url = msg.url(not_ready_go)
			label_url.fragment = "label"
			label.set_text(label_url, "Need at least 2 players!")
			return
		end
		msg.post("menu:/menu", "change_screen", { screen = "game"})
		close_lobby(self)
		start_game(self, self.players)
		self.state = hash("loading")
	elseif message_id == hash("game_over") then
		msg.post("#gameproxy", "unload")
		local winner_player = self.players[message.winner]
		show_win(self, winner_player)
	elseif message_id == hash("set_ready") then
		self.players[message.player_id].ready = message.ready
	end
	
end

function on_input(self, action_id, action)
	if self.state == hash("menu") or self.state == hash("lobby") or self.state == hash("win") then

		-- send all inputs to the menu
		for _, cb in pairs(all_input_cbs) do
			local r = cb(self, action_id, action)
			if r then
				msg.post("menu:/menu", "input", { action_id = r, action = action})
			end
		end
	end
	if self.state == hash("lobby") then
		-- is input from a new player?
		for k,cb in pairs(self.lobby_available_inputs) do
			local r = cb(self, action_id, action)
			if r then
				print("new player!")
				self.player_count = self.player_count + 1
				local player_id = hash("p" .. tostring(self.player_count))
				local player_id_text = "Player " .. tostring(self.player_count)
				local player = {
					player_id_text = player_id_text,
					input_cb = cb,
					color = self.player_colors[self.player_count],
					start_pos = self.spawn_positions[self.player_count]
				}
				self.players[player_id] = player
				msg.post("game:/game", "new_player", {
					id = player_id,
					player_color = player.color,
					start_pos = player.start_pos
				})
				
				self.lobby_available_inputs[k] = nil
				break
			end
		end
	end

	if self.state == hash("lobby") or self.state == hash("game") then
		-- find correct input handler
		for player_id, player in pairs(self.players) do
			local r = player.input_cb(self, action_id, action)
			if r then
				msg.post("game:/game", "player_input", {player_id = player_id, action_id = r, action = action})
				break
			end
		end
	end
end
